{"version":3,"sources":["components/ToggleTables.js","components/ToggleColumns.js","components/ProductList.js","components/ProductListSRT.js","components/FilterForm.js","containers/Search.js","App.js","serviceWorker.js","index.js"],"names":["ToggleTables","onRadioClick","e","props","target","name","className","this","tables","names","map","index","key","type","checked","selected","onChange","Component","ToggleColumns","onCheckboxClick","Object","keys","columns","column","ProductList","visibleColumns","filter","products","length","p","join","FilterForm","onPriceInputChange","value","htmlFor","placeholder","priceFrom","priceTo","Search","setState","filterProducts","displayedProducts","state","price","id","department","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2285b2f4.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport '../styles/ToggleTables.css';\r\n\r\nexport default class ToggleTables extends Component {\r\n    onRadioClick = (e) => {\r\n        this.props.onRadioClick(e.target.name);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <p>Tables</p>\r\n                <div className=\"toggle-tables\">\r\n                    {\r\n                        this.props.tables.names.map((name, index) => {\r\n                            return (\r\n                                <div key={index} className=\"checkbox-pair\">\r\n                                    <input name={name} type=\"radio\"\r\n                                        checked={this.props.tables.selected === name} onChange={e => this.onRadioClick(e)} />\r\n                                    <label>\r\n                                        {name}\r\n                                    </label>\r\n                                </div>)\r\n                        })\r\n                    }\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react'\nimport '../styles/ToggleColumns.css';\n\nexport default class ToggleColumns extends Component {\n  onCheckboxClick = (e) => {\n    this.props.onCheckboxClick(e.target.name, e.target.checked);\n  }\n\n  render() {\n    return (\n      <>\n        <p>Columns</p>\n        <div className=\"toggle-columns\">\n\n          {\n            Object.keys(this.props.columns).map((column, index) => {\n              return (\n                <div key={index} className=\"checkbox-pair\">\n                  <input name={column} type=\"checkbox\"\n                    checked={this.props.columns[column]} onChange={e => this.onCheckboxClick(e)} />\n                  <label>\n                    {column}\n                  </label>\n                </div>)\n            })\n          }\n        </div>\n      </>\n    );\n  }\n}\n","import React, { Component } from 'react'\nimport '../styles/ProductList.css';\n\nexport default class ProductList extends Component {\n\n  render() {\n    const columnNamesArr = Object.keys(this.props.columns);\n    const visibleColumns = columnNamesArr.filter(name=>this.props.columns[name]);\n    \n    return (\n      <div className=\"product-list\">\n        <header>\n          <strong>default - Product List ({this.props.products.length} items)</strong>\n        </header>\n        <table>\n          <thead>\n            <tr>\n              {visibleColumns.map((name,index)=><th key={index}>{name}</th>)}\n            </tr>\n          </thead>\n          <tbody>\n          {this.props.products.map((p,index)=>(\n           <tr key={index}>\n             {visibleColumns.map((name,index)=><td key={index}>{p[name]}</td>)}\n           </tr>\n           ))}\n          </tbody>\n        </table>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport { Table, Thead, Tbody, Tr, Th, Td } from 'react-super-responsive-table'\nimport 'react-super-responsive-table/dist/SuperResponsiveTableStyle.css'\nimport '../styles/ProductListSRT.css';\n\nexport default class ProductList extends Component {\n\n  render() {\n    const columnNamesArr = Object.keys(this.props.columns);\n    const visibleColumns = columnNamesArr.filter(name => this.props.columns[name]);\n\n    return (\n      <div className=\"product-list\">\n        <header>\n          <strong>react-super-responsive-table - Product List ({this.props.products.length} items)</strong>\n        </header>\n        <Table key={visibleColumns.join('')}>\n          <Thead>\n            <Tr>\n              {visibleColumns.map((name, index) => <Th key={index}>{name}</Th>)}\n            </Tr>\n          </Thead>\n          <Tbody>\n            {this.props.products.map((p, index) => (\n              <Tr key={index}>\n                {visibleColumns.map((name, index) => <Td key={index}>{p[name]}</Td>)}\n              </Tr>\n            ))}\n          </Tbody>\n        </Table>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport '../styles/FilterForm.css';\n\nexport default class FilterForm extends Component {\n\n  onPriceInputChange = (e) => {\n    this.props.onPriceInputChange(e.target.name, e.target.value)\n  }\n\n  render() {\n    return (\n      <div className=\"FilterForm\">\n        <label htmlFor=\"name\">Filter:</label>\n        <div className=\"inputs\">\n          <input\n            type=\"number\"\n            name=\"priceFrom\"\n            placeholder=\"Price from...\"\n            value={this.props.priceFrom}\n            onChange={e => this.onPriceInputChange(e, \"priceFrom\")} />\n          <input\n            type=\"number\"\n            name=\"priceTo\"\n            placeholder=\"Price to...\"\n            value={this.props.priceTo}\n            onChange={e => this.onPriceInputChange(e, \"priceTo\")} />\n\n        </div>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport '../styles/Search.css';\nimport ToggleTables from '../components/ToggleTables';\nimport ToggleColumns from '../components/ToggleColumns';\nimport ProductList from '../components/ProductList';\nimport ProductListSRT from '../components/ProductListSRT';\nimport FilterForm from '../components/FilterForm';\n\nexport default class Search extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      priceFrom: '',\n      priceTo: '',\n      tables: {\n        names: ['default', 'react-super-responsive-table'],\n        selected: 'default'\n      },\n      columns: {\n        id: true,\n        name: true,\n        department: true,\n        price: true\n      },\n      displayedProducts: props.products\n    };\n  }\n\n  onPriceInputChange = (name, value) => {\n    this.setState({ [name]: value }, () => this.filterProducts())\n  }\n\n  filterProducts = () => {\n    const displayedProducts = this.props.products.filter(p => {\n      const { priceFrom, priceTo } = this.state;\n      if (priceFrom && priceTo && priceFrom > priceTo) {\n        return true;\n      }\n\n      if (priceFrom && priceTo) {\n        return p.price >= priceFrom && p.price <= priceTo\n      } else if (priceFrom) {\n        return p.price >= priceFrom\n      } else if (priceTo) {\n        return p.price <= priceTo\n      }\n      return true;\n    })\n    this.setState({ displayedProducts });\n  }\n\n  onRadioClick = (selected) => {\n    this.setState({ tables: { ...this.state.tables, selected } });\n  }\n\n  onCheckboxClick = (name, checked) => {\n    const columns = { ...this.state.columns, [name]: checked }\n    this.setState({ columns });\n  }\n\n  render() {\n    return (\n      <div className=\"Products\">\n        <FilterForm\n          priceFrom={this.state.priceFrom}\n          priceTo={this.state.priceTo}\n          onPriceInputChange={this.onPriceInputChange} />\n\n        <ToggleTables\n          onRadioClick={this.onRadioClick}\n          tables={this.state.tables} />\n\n        <ToggleColumns\n          onCheckboxClick={this.onCheckboxClick}\n          columns={this.state.columns} />\n        {\n          this.state.tables.selected === 'react-super-responsive-table' ?\n            <ProductListSRT\n              products={this.state.displayedProducts}\n              columns={this.state.columns} /> :\n            <ProductList\n              products={this.state.displayedProducts}\n              columns={this.state.columns} />\n        }\n\n      </div>\n    );\n  }\n}\n","import React from 'react'\n\nimport Search from './containers/Search'\nimport products from './assets/products.json';\n\nconst App = () => {\n  return <Search products={products} />\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}